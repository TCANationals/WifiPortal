---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NLSC WiFi Portal
Parameters:
  DomainName:
    Type: String
    Description: API Domain name
    Default: ''

Conditions:
  UseDomainName:
    !Not
      - !Equals
        - !Ref DomainName
        - ''

Resources:
  ExpressApi:
    Type: AWS::Serverless::HttpApi

  ExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: main.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ProxyApiRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpressApi

  UserTable:
    Type: AWS::Serverless::SimpleTable

  StaticLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: static.handler
      MemorySize: 128
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Timeout: 30

  # Allow ALB to invoke lambda function
  ExpressLambdaAlbPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ExpressLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  StaticLambdaAlbPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StaticLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  # Setup target group for Lambda (will be used by ALB if enabled, otherwise no-op)
  LambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ExpressLambdaAlbPermission
    Properties:
      TargetType: lambda
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: true
      Targets:
        - Id: !GetAtt ExpressLambdaFunction.Arn

  StaticTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: StaticLambdaAlbPermission
    Properties:
      TargetType: lambda
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: true
      Targets:
        - Id: !GetAtt StaticLambdaFunction.Arn

  # # Set up Global Accelerator + ALB + Target Group to get dedicated IPs
  # Accelerator:
  #   Type: AWS::GlobalAccelerator::Accelerator
  #   Condition: UseDomainName
  #   Properties:
  #     Name: WifiAccelerator
  #     Enabled: true

  # AcceleratorListenerHTTP:
  #   Type: AWS::GlobalAccelerator::Listener
  #   Condition: UseDomainName
  #   Properties:
  #     AcceleratorArn:
  #       Ref: Accelerator
  #     Protocol: TCP
  #     PortRanges:
  #     - FromPort: 80
  #       ToPort: 80

  # AcceleratorListenerHTTPS:
  #   Type: AWS::GlobalAccelerator::Listener
  #   Condition: UseDomainName
  #   Properties:
  #     AcceleratorArn:
  #       Ref: Accelerator
  #     Protocol: TCP
  #     PortRanges:
  #     - FromPort: 443
  #       ToPort: 443

  # MyApiCertificate:
  #   Type: 'AWS::CertificateManager::Certificate'
  #   Condition: UseDomainName
  #   Properties:
  #     DomainName: !Sub '*.${DomainName}'
  #     DomainValidationOptions:
  #       - DomainName: !Sub '*.${DomainName}'
  #         ValidationDomain: !Ref DomainName
  #     SubjectAlternativeNames:
  #       - !Ref DomainName

  # MyApiDomainName:
  #   Type: 'AWS::ApiGateway::DomainName'
  #   Condition: UseDomainName
  #   Properties:
  #     CertificateArn: !Ref MyApiCertificate
  #     DomainName: !Ref DomainName

  # Route53HostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Condition: UseDomainName
  #   Properties:
  #     Name: !Ref DomainName

  # MyApiRoute53RecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Condition: UseDomainName
  #   Properties:
  #     HostedZoneId: !Ref Route53HostedZone
  #     RecordSets:
  #       - Name: !Sub ${DomainName}.
  #         Type: A
  #         AliasTarget:
  #           EvaluateTargetHealth: false
  #           HostedZoneId: !GetAtt MyApiDomainName.DistributionHostedZoneId
  #           DNSName: !GetAtt MyApiDomainName.DistributionDomainName

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApi}/stages/prod

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Sub https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/

  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value: !Ref ExpressLambdaFunction
